#!/bin/bash

# CS344 Spring 2015 - Program 1 - stats
# Erik Ratcliffe

# Set up a trap to delete temporary files if any of the following signals
# is encountered:
#
# INT  (hit CTRL-C)
# TERM (same as CTRL-C, just a different name)
# QUIT (self explanatory?)
# HUP  (when the controlling terminal closes)
# EXIT (when the script exits on its own)
trap "if [ -e tmp$$ ]; then rm tmp$$; fi; exit" INT TERM QUIT HUP EXIT


# Usage string, displayed when not enough arguments are passed to the
# script or when an invalid argument is passed to the script.
USAGE="Usage: $0 {-rows|cols} [file]"


# Process the input as rows. $1 is the input file that is passed to
# this function on the same line on which it's called, or if none is
# called, stdin is used.
function rows {
  # Display the heading
  echo -e "Average\tMedian"
  
  # Read lines from either stdin or the files passed on the command line
  while read line 
  do 
      # Sort the line and read it into an array. Convert (tr) newlines to
      # spaces so the sorted numbers will all be on one line.
      read -a sortedArr <<< $(echo $line | awk '{ 
        split($0, s, " "); 
        for (i in s) 
          print s[i] | "sort -n"
      }' | tr '\n' ' ')

      # Add the numbers in the line and calculate the average of the numbers, 
      # rounded up (rounding math borrowed from Eric Anderson's post on Canvas).
      for idx in "${sortedArr[@]}"
      do
          sum=$(( $sum + $idx ))
      done

      # Calculate the average. Halving the denominator and adding the result
      # to the numerator actually makes rounding work. Call it alchemy.
      avg=$(( ($sum + (${#sortedArr[*]} / 2)) / ${#sortedArr[*]} ))

      # Calculate the median value. If there is an odd number of values,
      # round up to the next higher value (bash seems to do this
      # automatically without any fancy math tricks).
      medIdx=$(( ${#sortedArr[*]} / 2 ))
      med=${sortedArr[medIdx]}
  
      # Display the average and median values for the line
      echo -e "$avg\t$med"
  
      # Reset sum
      sum=0
  done < $1
}


# Process the input as columns. $input is the input file that is passed to
# this function on the same line on which it's called, or if none is
# called, stdin is used.
function columns {
  if [[ "$#" -lt 1 ]]
  then
      cat > tmp$$
  else 
      cp $1 tmp$$
  fi

  # Get the total number of columns
  totalCols=$(head -n 1 ./tmp$$ | wc -w)
  
  # Read each column into an array, calculate average and median
  col=1
  while [[ $col -le $totalCols ]]
  do
    idx=0
    while read line 
    do 
        # Grab the column from the line being processed and put it in the
        # column array.
        colArr[$idx]=$(echo $line | awk -v field=$col '{print $field}')
  
        # Move to the next index in the column array.
        idx=$(($idx + 1))
    done < ./tmp$$
  
    # Sort the array
    read -a sortedArr <<< $(echo ${colArr[@]} | awk '{ 
      split($0, s, " "); 
      for (i in s) 
        print s[i] | "sort -n"
    }' | tr '\n' ' ')
  
    # Add the numbers in the column.
    for arrIdx in "${sortedArr[@]}"
    do
        sum=$(( $sum + $arrIdx ))
    done

    # Calculate the average. Halving the denominator and adding the result
    # to the numerator actually makes rounding work. Call it alchemy.
    avg=$(( ($sum + (${#sortedArr[*]} / 2)) / ${#sortedArr[*]} ))
  
    # Add the final average to the averages array
    avgs[$(($col - 1))]=$avg
    
    # Calculate the median value. If there is an odd number of values,
    # round up to the next higher value (bash seems to do this
    # automatically without any fancy math tricks).
    medIdx=$(( ${#sortedArr[*]} / 2 ))
    med=${sortedArr[medIdx]}
  
    # Add to the medians array
    meds[$(($col - 1))]=$med
  
    # Reset sum
    sum=0
  
    # Move to the next column
    col=$(($col + 1))
  done
  
  # Display the results. Insert a tab after each element in the array to
  # (sort of) match the output in the assignment description. 
  echo -e "Averages:\n${avgs[@]/%/$'\t'}"
  echo -e "Medians:\n${meds[@]/%/$'\t'}"
}


# If we have at least one argument (but not more than two arguments) on
# the command line, move ahead. If one argument is passed, process it as
# if it is one of the two allowed operational arguments:
#
#   -r[*] for rows
#   -c[*] for columns
#
# If no second argument is passed, assume stdin is used for input.
#
# If a second argument is passed, make sure it's a valid file and make
# sure it's not another command line argument (starting with "-").
if [[ $# -ge 1 ]] && [[ $# -le 2 ]]
then  
  if [[ $# -eq 2 ]] && [[ $2 == -* || ! -f $2 || ! -r $2 ]]
  then
    echo -e "Invalid or otherwise unreadable file.\n" >&2
    echo -e "${USAGE}\n" >&2
    exit 1
  else
    param=$1
    case $param in 
      -r* )
          rows ${2:-/dev/stdin}
          ;;
      -c* )
          columns ${2:-/dev/stdin}
          ;;
      *   )
          echo -e "${USAGE}\n" >&2
          exit 1
          ;;
    esac 
  fi
else
  echo -e "${USAGE}\n" >&2
  exit 1
fi

